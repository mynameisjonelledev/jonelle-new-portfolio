"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const useMouseMove = (delay, opacity) => {
    const endX = (0, react_1.useRef)(0);
    const endY = (0, react_1.useRef)(0);
    const _x = (0, react_1.useRef)(null);
    const _y = (0, react_1.useRef)(null);
    const mouseRef = (0, react_1.useRef)(null);
    const requestRef = (0, react_1.useRef)(0);
    const animateMouse = () => {
        if (mouseRef.current === null)
            return;
        if (_x.current !== null && _y.current !== null) {
            _x.current += (endX.current - _x.current) / delay;
            _y.current += (endY.current - _y.current) / delay;
        }
        mouseRef.current.style.transform = `translate(-50%, -50%) translate3d(${_x.current}px, ${_y.current}px, 0)`;
        requestRef.current = requestAnimationFrame(animateMouse);
    };
    const handleMouseMove = (e) => {
        if (mouseRef.current === null)
            return;
        mouseRef.current.style.opacity = `${opacity}`;
        endX.current = e.clientX;
        endY.current = e.clientY;
        if (_x.current === null || _y.current === null) {
            _x.current = endX.current;
            _y.current = endY.current;
            mouseRef.current.style.transform = `translate(-50%, -50%) translate3d(${_x.current}px, ${_y.current}px, 0)`;
        }
    };
    (0, react_1.useEffect)(() => {
        if (!mouseRef.current)
            return;
        animateMouse();
        window.addEventListener('mousemove', handleMouseMove);
        return () => {
            cancelAnimationFrame(requestRef.current);
            window.removeEventListener('mousemove', handleMouseMove);
        };
    }, [delay, opacity]);
    return mouseRef;
};
exports.default = useMouseMove;
